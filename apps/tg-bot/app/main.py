import asyncio
import os

import httpx
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("TG_BOT_TOKEN", "")
YANDEX_TOKEN = os.getenv("YANDEX_TOKEN")  # OAuth —Ç–æ–∫–µ–Ω –Ø.–î–∏—Å–∫–∞

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ—Ç–∞
if not BOT_TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: TG_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
    exit(1)

bot = Bot(BOT_TOKEN)
dp = Dispatcher()


@dp.message(F.text & F.text.startswith("/start"))
async def start_command(m: Message):
    await m.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.\n"
        "üì∏ –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!"
    )


@dp.message(F.photo)
async def save_photo(m: Message):
    if not m.photo:
        await m.reply("‚ùå –û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    if not YANDEX_TOKEN:
        await m.reply("‚ùå –û—à–∏–±–∫–∞: YANDEX_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return

    try:
        file = await bot.get_file(m.photo[-1].file_id)
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file.file_path}"

        async with httpx.AsyncClient(timeout=60) as c:
            # 1) –ü–æ–ª—É—á–∞–µ–º upload URL
            resp = await c.get(
                "https://cloud-api.yandex.net/v1/disk/resources/upload",
                params={"path": f"app/{file.file_unique_id}.jpg", "overwrite": "true"},
                headers={"Authorization": f"OAuth {YANDEX_TOKEN}"},
            )
            resp.raise_for_status()
            href = resp.json()["href"]

            # 2) –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            tg = await c.get(file_url)
            up = await c.put(href, content=tg.content)
            up.raise_for_status()

        await m.reply("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ ‚úÖ")

    except httpx.HTTPStatusError as e:
        if e.response.status_code == 401:
            await m.reply("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ YANDEX_TOKEN")
        elif e.response.status_code == 403:
            await m.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É")
        else:
            await m.reply(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {e.response.status_code}")
    except Exception as e:
        await m.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")


async def main():
    if not YANDEX_TOKEN:
        print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: YANDEX_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        print("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
